# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Android Release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    
    runs-on: ubuntu-latest

     # Uses steps to represent a sequence of tasks that will be executed as part of job
    steps: 
      # Readies your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Sets up Java so your job can use it for the Flutter app build
      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: "12.x"
          # providing Gradle to be cached with respect to the Java SDK
          cache: 'gradle' 
      
      # Sets up Flutter using the subosito Flutter workflow
      - uses: subosito/flutter-action@v2
        with:
        # Adjusts to the Flutter version you are working with
          flutter-version: "3.13.9"
          channel: 'stable'
          # enabling caching for the Flutter SDK
          cache: true

      # caching build  - gradle  - pub-cache
      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            build/
            android/.gradle/
          key: ${{ runner.os }}-build_and_android-${{ hashFiles('**/*.gradle*', 'pubspec.lock') }}

      - name: Install dependencies
        run: flutter pub get

      # Uncomment this step to verify the use of 'dart format' on each commit.
      # - name: Verify formatting
      #   run: dart format --output=none --set-exit-if-changed .

      - name: Analyze project source
        run: flutter analyze
      
      - name: Read release version
        id: read-version
        uses: NiklasLehnfeld/flutter-version-number-action@main
        with:
          file-path: pubspec.yaml      
      
      - name: Start release build APK
        run: flutter build apk --release

      # Uploaded the APK release as an artifact to be used in the next job
      - name: Upload APK Release
        uses: actions/upload-artifact@v2
        with:
          name: apk-release
          path: build/app/outputs/flutter-apk/app-release.apk

      # --- creating github apk-release ---
      - name: Create apk-release in GitHub
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/app/outputs/flutter-apk/app-release.apk"
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: apk_Release_${{ steps.read-version.outputs.version-number }}
          allowUpdates: true
